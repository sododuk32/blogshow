name: Deploy to Amazon ECS this Next js Image

on:
  push:
    branches: [master]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_TASK_FAMILY: ${{ secrets.ECS_TASK_FAMILY }}
  ECS_ELASTIC_IP: eipalloc-0848fe4036153a9a8
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: üê≥ Build, tag, and push Docker image
        run: |
          IMAGE_URI=$(aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION --query "repositories[0].repositoryUri" --output text)

          docker build \
            --build-arg HanTKey=${{ secrets.INCODE_HANTKEY }} \
            --build-arg HanTSecret=${{ secrets.INCODE_HANTSECRET }} \
            --build-arg HantBaseUrl=${{ secrets.INCODE_HANTBASEURL }} \
            -t $IMAGE_URI .

          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Fill in new image ID in task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: blogshow
          image: ${{ env.IMAGE_URI }}

      - name: Deploy ECS task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: üîó Associate Elastic IP to newest matching EC2 instance
        run: |
          echo "üîç Finding EC2 instance with 'sCh' in tags and running state..."

          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].{InstanceId:InstanceId,LaunchTime:LaunchTime,Tags:Tags}" \
            --output json --region $AWS_REGION | \
            jq -r '
              [.[][] 
               | select(.Tags[]?.Value | contains("sCh")) 
              ] 
              | sort_by(.LaunchTime) 
              | last 
              | .InstanceId')

          if [ -z "$INSTANCE_ID" ]; then
          echo "‚ùå No matching EC2 instance found with tag value containing 'sCh'."
          exit 1

          fi

          echo "‚úÖ Found EC2 instance ID: $INSTANCE_ID"

          aws ec2 associate-address \
            --instance-id "$INSTANCE_ID" \
            --allocation-id "$ECS_ELASTIC_IP" \
            --region $AWS_REGION \
            --allow-reassociation

        env:
          AWS_REGION: ${{ env.AWS_REGION }}
